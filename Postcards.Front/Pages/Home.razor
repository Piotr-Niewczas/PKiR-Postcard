@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Postcards.Models
@inject IConfiguration Configuration


<PageTitle>Home</PageTitle>

@if (_postcard is null)
{
    if (!_isUserLoggedIn)
    {
        <label for="username">Input user name</label>
        <InputText id="username" @bind-Value="_userName"/>
        <button @onclick="Login"> Login </button>
    }

    if (_isUserLoggedIn)
    {
        if (_isGeneratingPostcard)
        {
            <div class="loader"></div>
            <p>Generating postcard...</p>
            <p>This may take a while</p>
        }
        else
        {
            <h1>Welcome, @_userName!</h1>
            <p> Please input thr prompt to generate a postcard:</p>
            <label for="text">Enter text</label>
            <InputText id="text" @bind-Value="_postcardText"/>
            <label for="location">Enter prompt</label>
            <InputNumber id="location" @bind-Value="_postcardLocationId"/>

            <button disabled="@(_postcardText != "" && _postcardLocationId != 0)" @onclick="GeneratePostcard"> Generate</button>
        }
    }
}
else
{
    <h1>Postcard generated!</h1>
    <img src="@_postcard.ImageUrl" alt="Postcard image"/>
    <p>@_postcard.Text</p>
}


@code{

    bool _isUserLoggedIn;
    string _userName = "";

    int _postcardLocationId;
    string _postcardText = "";
    bool _isGeneratingPostcard;

    Postcard? _postcard;

    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing hub connection");
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration["mainApiUrl"]}/hubs/postcard" ?? throw new InvalidOperationException("Missing mainApiUrl in appsettings.json"), options => { options.Headers.Add("Access-Control-Allow-Origin", "*"); })
            .Build();

        Console.WriteLine("Setting up hub connection");

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            Console.WriteLine(encodedMsg);
        });

        _hubConnection.On<Postcard>("ReceiveFullPostcard", (postcard) =>
        {
            Console.WriteLine($"Received ready postcard");
            _isGeneratingPostcard = false;
            _postcard = postcard;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        Console.WriteLine("Hub connection started");
    }

    async Task Login()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("AddToGroup", _userName);
            Console.WriteLine($"User {_userName} logged in");
            _isUserLoggedIn = true;
        }
        else
        {
            Console.WriteLine("Hub connection is null");
        }
    }

    async Task GeneratePostcard()
    {
        if (_hubConnection is not null)
        {
            Console.WriteLine($"Generating postcard with text: {_postcardText} and locationId: {_postcardLocationId}");
            _isGeneratingPostcard = true;
            await _hubConnection.SendAsync("AddPostcard", _postcardLocationId, _postcardText, _userName);
        }
        else
        {
            Console.WriteLine("Hub connection is null");
        }
    }

}