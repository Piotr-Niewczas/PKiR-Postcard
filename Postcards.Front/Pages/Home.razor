@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Postcards.Models
@inject IConfiguration Configuration


<PageTitle>Home</PageTitle>

<style>
    .radio-item {
        margin-bottom: 10px;
        background-color: #f2f2f2;
        padding: 10px;
    }

    .column {
        flex: 1;
        padding: 10px;
    }
</style>

<div>
    @if (_postcard is null)
    {
        if (!_isUserLoggedIn)
        {
            <label for="username">Input user name</label>
            <InputText id="username" @bind-Value="_userName"/>
            <button @onclick="Login"> Login</button>
        }

        if (_isUserLoggedIn)
        {
            if (_isGeneratingPostcard)
            {
                <div class="loader"></div>
                <p>Generating postcard...</p>
                <p>This may take a while</p>
            }
            else
            {
                <h1>Welcome, @_userName!</h1>
                <div class="column">
                    <p> Please select an image and text</p>
                    <label for="text">Enter text</label>
                    <InputText id="text" @bind-Value="_postcardText"/>
                </div>

                <div class="column">
                    <InputRadioGroup @bind-Value="_postcardBaseImgName">
                        @foreach (var img in _baseImgs)
                        {
                            <div class="radio-item">
                                <InputRadio Value="@img.FileName"/>
                                @img.Name
                                <img src="@($"{Configuration["mainApiUrl"]}/img/mini/{@img.FileName}")" alt="@img.Description"/>
                                @img.Description
                            </div>
                        }
                    </InputRadioGroup>
                </div>

                <button class="btn btn-primary" @onclick="GeneratePostcard"> Generate</button>
            }
        }
    }
    else
    {
        <h1>Postcard generated!</h1>
        <img src="@_postcard.ImageUrl" alt="Postcard image"/>
        <p>@_postcard.Text</p>
    }

</div>

@code{

    class BaseImg(string fileName, string description)
    {
        public string FileName { get; set; } = fileName;
        public string Description { get; set; } = description;

        public string Name
        {
            get
            {
                var temp = FileName.Split('.')[0];
                return char.ToUpper(temp[0]) + temp[1..];
            }
        }
    }

    List<BaseImg> _baseImgs =
    [
        new BaseImg("lake.jpg", "A beautiful lake in the mountains"),
        new BaseImg("field.jpg", "A field of grass"),
        new BaseImg("warsaw.jpg", "Warsaw cityscape"),
    ];

    bool _isUserLoggedIn;
    string _userName = "";

    string _postcardBaseImgName = "";
    string _postcardText = "";
    bool _isGeneratingPostcard;

    Postcard? _postcard;

    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing hub connection");
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration["mainApiUrl"]}/hubs/postcard" ?? throw new InvalidOperationException("Missing mainApiUrl in appsettings.json"), options => { options.Headers.Add("Access-Control-Allow-Origin", "*"); })
            .Build();

        Console.WriteLine("Setting up hub connection");

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            Console.WriteLine(encodedMsg);
        });

        _hubConnection.On<Postcard>("ReceiveFullPostcard", (postcard) =>
        {
            Console.WriteLine($"Received ready postcard");
            _isGeneratingPostcard = false;
            _postcard = postcard;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        Console.WriteLine("Hub connection started");
    }

    async Task Login()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("AddToGroup", _userName);
            Console.WriteLine($"User {_userName} logged in");
            _isUserLoggedIn = true;
        }
        else
        {
            Console.WriteLine("Hub connection is null");
        }
    }

    async Task GeneratePostcard()
    {
        if (_hubConnection is not null)
        {
            Console.WriteLine($"Generating postcard with text: {_postcardText} and locationId: {_postcardBaseImgName}");
            _isGeneratingPostcard = true;
            await _hubConnection.SendAsync("AddPostcard", _postcardBaseImgName, _postcardText, _userName);
        }
        else
        {
            Console.WriteLine("Hub connection is null");
        }
    }

}